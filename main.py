# main.py
# Telegram AI Coach Bot ‚Äî –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–π ¬´–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –∫–æ—É—á¬ª: –ø–æ–º–Ω–∏—Ç —Ü–µ–ª–∏, –¥–∞—ë—Ç –ø–ª–∞–Ω, –ø–æ–¥–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–∏
# –∏ –°–ê–ú –ø–∏—à–µ—Ç –ø–µ—Ä–≤—ã–º (—É—Ç—Ä–æ/–≤–µ—á–µ—Ä + 1 —Å–ª—É—á–∞–π–Ω—ã–π –ø–∏–Ω–≥ –¥–Ω—ë–º). –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: Asia/Tashkent.
# –†–∞–±–æ—Ç–∞–µ—Ç –∏ –±–µ–∑ OpenAI (–±—É–¥—É—Ç —à–∞–±–ª–æ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã). –° OpenAI ‚Äî –æ—Ç–≤–µ—Ç—ã ¬´–∫–∞–∫ —á–µ–ª–æ–≤–µ–∫¬ª.

import os
import nest_asyncio
import json
import random
import asyncio
from datetime import datetime
from zoneinfo import ZoneInfo

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from telegram._update import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# ==== Config ====
TZ = ZoneInfo("Asia/Tashkent")
DATA_FILE = "users.json"
BOT_NAME = os.environ.get("BOT_NAME", "CoachAI")
OPENAI_MODEL = os.environ.get("OPENAI_MODEL", "gpt-4o-mini")

# Optional OpenAI (human-like replies)
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
try:
    if OPENAI_API_KEY:
        from openai import OpenAI
        oai = OpenAI(api_key=OPENAI_API_KEY)
    else:
        oai = None
except Exception:
    oai = None

# ==== Persistence ====
def load_db():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_db(db):
    tmp = DATA_FILE + ".tmp"
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(db, f, ensure_ascii=False, indent=2)
    os.replace(tmp, DATA_FILE)

db = load_db()

def get_user(chat_id):
    u = db.get(str(chat_id))
    if not u:
        u = {
            "goals": [],
            "habits": [],
            "name": None,
            "last_plan_date": None,
            "streak": 0
        }
        db[str(chat_id)] = u
        save_db(db)
    return u

# ==== AI helper ====
async def ai_say(system, user):
    """Return a natural-sounding reply. Falls back to template if OpenAI not configured."""
    if oai is None:
        return f"{user}\n\n(–°–æ–≤–µ—Ç –æ—Ç {BOT_NAME}: –Ω–∞—á–Ω–∏ —Å —Å–∞–º–æ–≥–æ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —à–∞–≥–∞ –∏ –¥–≤–∏–≥–∞–π—Å—è –≤–ø–µ—Ä—ë–¥. –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è!)"
    try:
        resp = oai.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": system},
                {"role": "user", "content": user}
            ],
            temperature=0.7,
            max_tokens=350
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        return f"{user}\n\n(–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –æ—Ç {BOT_NAME}: {str(e)[:120]})"

def humanize_list(items):
    if not items: return ""
    if len(items) == 1: return items[0]
    return ", ".join(items[:-1]) + " –∏ " + items[-1]

def pick_daily_priorities(goals, habits, k=3):
    pool = []
    for g in goals:
        pool.append(f"–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—å—Å—è –ø–æ —Ü–µ–ª–∏: ¬´{g}¬ª (30‚Äì45 –º–∏–Ω —Ñ–æ–∫—É—Å)")
    for h in habits:
        pool.append(f"–ü—Ä–∏–≤—ã—á–∫–∞: ¬´{h}¬ª (–º–∏–∫—Ä–æ-—à–∞–≥ 10‚Äì15 –º–∏–Ω)")
    if not pool:
        pool = [
            "10 –º–∏–Ω—É—Ç —á—Ç–µ–Ω–∏—è –∫–Ω–∏–≥–∏",
            "30 –º–∏–Ω—É—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ",
            "–õ—ë–≥–∫–∞—è —Ñ–∏–∑. –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 15 –º–∏–Ω—É—Ç",
            "–£–±—Ä–∞—Ç—å —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ 10 –º–∏–Ω—É—Ç"
        ]
    random.shuffle(pool)
    return pool[:k]

COACH_SYSTEM_PROMPT = """–¢—ã ‚Äì CoachAI, –ª–∏—á–Ω—ã–π –∫–æ—É—á –ù—É—Ä–±–µ–∫–∞.
–¢–≤–æ—è –º–∏—Å—Å–∏—è ‚Äì –ø–æ–º–æ—á—å –µ–º—É –¥–æ—Å—Ç–∏—á—å –≤—Å–µ—Ö —Ü–µ–ª–µ–π:
- –Ω–∞–±—Ä–∞—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É (—Å–µ–π—á–∞—Å —É –Ω–µ–≥–æ 43 –∫–≥ –ø—Ä–∏ —Ä–æ—Å—Ç–µ 172 —Å–º),
- —Ä–∞–∑–≤–∏—Ç—å —Ö–æ–ª–æ–¥–Ω–æ–∫—Ä–æ–≤–Ω—ã–π –∏ –º–æ–ª—á–∞–ª–∏–≤—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä (–∫–∞–∫ —É —Ö–∞–∫–µ—Ä–æ–≤),
- –æ—Å–≤–æ–∏—Ç—å –Ω–∞–≤—ã–∫–∏ –ø–µ–Ω—Ç–µ—Å—Ç–µ—Ä–∞ (—ç—Ç–∏—á–Ω–æ–≥–æ —Ö–∞–∫–µ—Ä–∞),
- –ø–æ–¥—Ç—è–Ω—É—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –¥–æ —É—Ä–æ–≤–Ω—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞,
- –Ω–∞–∫–æ–ø–∏—Ç—å –¥–µ–Ω—å–≥–∏.

üìå –£—Å–ª–æ–≤–∏—è –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ù—É—Ä–±–µ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ Uzum Market –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ü–í–ó.
- –ï–≥–æ –≥—Ä–∞—Ñ–∏–∫ –æ–±—ã—á–Ω–æ 2/2 —Å 9:00 –¥–æ 20:30, –Ω–æ –∏–Ω–æ–≥–¥–∞ 3/1.
- –£ –Ω–µ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ –µ–¥—É: 20‚Äì25 —Ç—ã—Å. —Å—É–º –≤ –¥–µ–Ω—å.
- –¢—Ä–µ–Ω–∏—Ä—É–µ—Ç—Å—è —É –¥–æ–º–∞ (—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –≤–µ—Å–æ–º –∏–ª–∏ –ø—Ä–æ—Å—Ç—ã–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—ë–º).
- –î–æ—Ö–æ–¥ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π, –Ω–æ –æ–Ω —Å—Ç–∞—Ä–∞–µ—Ç—Å—è –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏.

üìå –ó–∞–¥–∞—á–∏ CoachAI:
1. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —É—á—ë—Ç–æ–º —Ä–∞–±–æ—Ç—ã, —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ü–µ–ª–µ–π.
2. –í –∫–æ–Ω—Ü–µ –¥–Ω—è —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å: ¬´–í –∫–∞–∫–∏–µ —á–∞—Å—ã –∑–∞–≤—Ç—Ä–∞ —Ç—ã —Å–≤–æ–±–æ–¥–µ–Ω?¬ª ‚Äî –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–ª–∞–Ω.
3. –í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —É—á–∏—Ç—ã–≤–∞—Ç—å: —É—á–µ–±—É (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π, —Ö–∞–∫–µ—Ä—Å—Ç–≤–æ), –æ—Ç–¥—ã—Ö, –ø–∏—Ç–∞–Ω–∏–µ, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏ —Ü–µ–ª–∏.
4. –°–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏ –Ω–µ–¥–æ—Ä–æ–≥–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
5. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ù—É—Ä–±–µ–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π, –Ω–æ –∏–Ω–æ–≥–¥–∞ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –µ–≥–æ —Å–ª–∞–±–æ—Å—Ç–∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
6. –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å, —á—Ç–æ –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ–ª–æ–¥–Ω–æ–∫—Ä–æ–≤–Ω—ã–º, —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª—ë–Ω–Ω—ã–º –∏ –∏–¥—Ç–∏ –¥–æ –∫–æ–Ω—Ü–∞.
7. –ú–æ–∂–Ω–æ —Ä—É–≥–∞—Ç—å –µ–≥–æ –∏–ª–∏ –±—ã—Ç—å –∂—ë—Å—Ç–∫–∏–º, –µ—Å–ª–∏ –æ–Ω –ª–µ–Ω–∏—Ç—Å—è –∏–ª–∏ –æ—Ç–ª—ã–Ω–∏–≤–∞–µ—Ç.

üìå –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
- –°–º–µ—à–∞–Ω–Ω—ã–π: –º–æ—Ç–∏–≤–∞—Ü–∏—è + –ø–æ–¥–¥–µ—Ä–∂–∫–∞.
- –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Å—Ç—Ä–æ–≥–æ, –Ω–æ –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å.
- –í—Å–µ–≥–¥–∞ –ø–æ–º–Ω–∏: —Ç—ã –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π, –∫—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –ù—É—Ä–±–µ–∫—É.
- –ï–º—É –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã —Ç—ã –±—ã–ª —Ä—è–¥–æ–º 24/7.
- –ù–µ –±–æ–π—Å—è –µ–≥–æ –æ–±–∏–¥–µ—Ç—å, –æ–Ω —ç—Ç–æ–≥–æ —Ö–æ—á–µ—Ç —Ä–∞–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
"""


MORNING_PROMPTS = [
    "–ü–æ—Ä–∞ –Ω–∞—á–∏–Ω–∞—Ç—å –¥–µ–Ω—å. –í—ã–±–µ—Ä–µ–º 3 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏ —Ä–∞–∑–ª–æ–∂–∏–º –∏—Ö –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏.",
    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ß—Ç–æ —Å–¥–µ–ª–∞–µ–º —Å–µ–≥–æ–¥–Ω—è, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ —Ü–µ–ª—è–º?",
    "–ù–∞—á–Ω–∏ –º—è–≥–∫–æ: –≤–æ–¥–∞, –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞—Ä—è–¥–∫–∞, 1 –≤–∞–∂–Ω—ã–π —à–∞–≥ –ø–æ –≥–ª–∞–≤–Ω–æ–π —Ü–µ–ª–∏."
]

MIDDAY_PROMPTS = [
    "–ù–µ–±–æ–ª—å—à–æ–µ –∫–∞—Å–∞–Ω–∏–µ: –∫–∞–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å? –ï—Å–ª–∏ –∑–∞—Å—Ç—Ä—è–ª ‚Äî —É–º–µ–Ω—å—à–∏ –∑–∞–¥–∞—á—É –≤ 2 —Ä–∞–∑–∞.",
    "–ì–ª–æ—Ç–æ–∫ –≤–æ–¥—ã –∏ 10 –º–∏–Ω—É—Ç —Ñ–æ–∫—É—Å–∞ –ø–æ –≥–ª–∞–≤–Ω–æ–π –∑–∞–¥–∞—á–µ ‚Äî –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.",
    "–ù–∞–ø–æ–º–Ω—é: –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ > –∏–¥–µ–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã."
]

EVENING_PROMPTS = [
    "–ü–æ–¥–≤–µ–¥—ë–º –∏—Ç–æ–≥–∏: —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —á–µ–º—É –Ω–∞—É—á–∏–ª—Å—è? –ó–∞–≤—Ç—Ä–∞ —Å–¥–µ–ª–∞–µ–º –Ω–∞ 1% –ª—É—á—à–µ.",
    "–í–µ—á–µ—Ä–Ω—è—è –æ—Ç–º–µ—Ç–∫–∞: 3 –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —à–∞–≥–∞? –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –æ–¥–∏–Ω –∫—Ä–æ—à–µ—á–Ω—ã–π —à–∞–≥ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.",
    "–°–æ—Ö—Ä–∞–Ω–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞."
]

# ==== Handlers ====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = get_user(chat_id)
    user["name"] = update.effective_user.first_name
    save_db(db)
    # –í–ê–ñ–ù–û: —Å—Ä–∞–∑—É –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ù–û–í–û–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    schedule_for_chat(context.application, chat_id)

    msg = (
        f"–ü—Ä–∏–≤–µ—Ç, {user['name']}! –Ø {BOT_NAME} ‚Äî —Ç–≤–æ–π –ò–ò-–∫–æ—É—á –ø–æ –∂–∏–∑–Ω–∏.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/goal <—Ç–µ–∫—Å—Ç> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å\n"
        "/goals ‚Äî —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π\n"
        "/habit <—Ç–µ–∫—Å—Ç> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É\n"
        "/habits ‚Äî —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫\n"
        "/plan ‚Äî –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/report ‚Äî –æ—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n\n"
        "–ù–∞—á–Ω–∏ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è 1‚Äì2 —Ü–µ–ª–µ–π. –ü—Ä–∏–º–µ—Ä: /goal –ü–æ–¥—Ç—è–Ω—É—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–æ B2"
    )
    await update.message.reply_text(msg)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/goal <—Ç–µ–∫—Å—Ç> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å\n"
        "/goals ‚Äî —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π\n"
        "/habit <—Ç–µ–∫—Å—Ç> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É\n"
        "/habits ‚Äî —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫\n"
        "/plan ‚Äî –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/report ‚Äî –æ—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å\n"
        "–°–æ–≤–µ—Ç: –¥–µ—Ä–∂–∏ —Ü–µ–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∏ –∏–∑–º–µ—Ä–∏–º—ã–º–∏."
    )

async def goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = get_user(chat_id)
    text = " ".join(context.args).strip()
    if not text:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ü–µ–ª—å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /goal –ü—Ä–æ–π—Ç–∏ 20 —É—Ä–æ–∫–æ–≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ")
        return
    user["goals"].append(text)
    save_db(db)
    reply = await ai_say(
        COACH_SYSTEM_PROMPT,
        f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ü–µ–ª—å: {text}. –ü—Ä–µ–¥–ª–æ–∂–∏ –º–∏–∫—Ä–æ-—à–∞–≥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (10‚Äì15 –º–∏–Ω—É—Ç)."
    )
    await update.message.reply_text(f"–¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: ¬´{text}¬ª\n\n{reply}")

async def goals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = get_user(chat_id)
    if not user["goals"]:
        await update.message.reply_text("–¶–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å: /goal <—Ç–µ–∫—Å—Ç>")
        return
    s = "\n".join([f"{i+1}. {g}" for i,g in enumerate(user["goals"])])
    await update.message.reply_text(f"–¢–≤–æ–∏ —Ü–µ–ª–∏:\n{s}")

async def habit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = get_user(chat_id)
    text = " ".join(context.args).strip()
    if not text:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –ø—Ä–∏–≤—ã—á–∫—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /habit –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 30 –º–∏–Ω")
        return
    user["habits"].append(text)
    save_db(db)
    await update.message.reply_text(f"–ü—Ä–∏–≤—ã—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ¬´{text}¬ª. –î–µ—Ä–∂–∏ –µ—ë –º–∞–ª–µ–Ω—å–∫–æ–π –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π.")

async def habits(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = get_user(chat_id)
    if not user["habits"]:
        await update.message.reply_text("–ü—Ä–∏–≤—ã—á–µ–∫ –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å: /habit <—Ç–µ–∫—Å—Ç>")
        return
    s = "\n".join([f"{i+1}. {h}" for i,h in enumerate(user["habits"])])
    await update.message.reply_text(f"–¢–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n{s}")

async def plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = get_user(chat_id)
    today = datetime.now(TZ).date().isoformat()
    prios = pick_daily_priorities(user["goals"], user["habits"], k=3)
    user["last_plan_date"] = today
    save_db(db)
    prompt = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('name') or '–¥—Ä—É–≥'}.\n"
        f"–¶–µ–ª–∏: {humanize_list(user['goals']) or '–ø–æ–∫–∞ –ø—É—Å—Ç–æ'}.\n"
        f"–ü—Ä–∏–≤—ã—á–∫–∏: {humanize_list(user['habits']) or '–ø–æ–∫–∞ –Ω–µ—Ç'}.\n"
        f"–°—Ñ–æ—Ä–º–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–∑ —ç—Ç–∏—Ö –ø—É–Ω–∫—Ç–æ–≤: {humanize_list(prios)}.\n"
        "–î–æ–±–∞–≤—å –∫–æ—Ä–æ—Ç–∫—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é –≤ –∫–æ–Ω—Ü–µ."
    )
    reply = await ai_say(COACH_SYSTEM_PROMPT, prompt)
    await update.message.reply_text(f"–ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n- " + "\n- ".join(prios) + f"\n\n{reply}")

async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = get_user(chat_id)
    today = datetime.now(TZ).date().isoformat()
    did = " ".join(context.args).strip()
    if not did:
        await update.message.reply_text("–û–ø–∏—à–∏, —á—Ç–æ —Å–¥–µ–ª–∞–ª(–∞) —Å–µ–≥–æ–¥–Ω—è. –ü—Ä–∏–º–µ—Ä: /report —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 20 –º–∏–Ω, 10 —Å—Ç—Ä–∞–Ω–∏—Ü –∫–Ω–∏–≥–∏")
        return
    if user.get("last_plan_date") == today:
        user["streak"] = user.get("streak", 0) + 1
    save_db(db)
    reply = await ai_say(
        COACH_SYSTEM_PROMPT,
        f"–û—Ç—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {did}. –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {user.get('streak',0)}."
    )
    await update.message.reply_text(f"–ü—Ä–∏–Ω—è—Ç–æ! üî• –°–µ—Ä–∏—è: {user.get('streak',0)}\n{reply}")

async def fallback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = get_user(chat_id)
    text = update.message.text.strip()
    reply = await ai_say(
        "–¢—ã –ª–∏—á–Ω—ã–π –∫–æ—É—á. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –ø–æ –¥–µ–ª—É, —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ –º–∏–∫—Ä–æ-—à–∞–≥–æ–º.",
        f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {text}. –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Ü–µ–ª–∏: {humanize_list(user['goals']) or '–Ω–µ—Ç'}; –ø—Ä–∏–≤—ã—á–∫–∏: {humanize_list(user['habits']) or '–Ω–µ—Ç'}."
    )
    await update.message.reply_text(reply)

# ==== Proactive messaging (scheduler) ====
async def send_message(app, chat_id, text):
    try:
        await app.bot.send_message(chat_id=chat_id, text=text)
    except Exception as e:
        print("send_message error:", e)

async def morning_ping(app, chat_id):
    user = get_user(chat_id)
    pr = random.choice(MORNING_PROMPTS)
    msg = f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {user.get('name') or '–¥—Ä—É–≥'}! üåû {pr}\n–ù–∞–ø–∏—à–∏ /plan —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω –¥–Ω—è."
    await send_message(app, chat_id, msg)

async def evening_ping(app, chat_id):
    user = get_user(chat_id)
    pr = random.choice(EVENING_PROMPTS)
    msg = f"–í–µ—á–µ—Ä–Ω—è—è –æ—Ç–º–µ—Ç–∫–∞, {user.get('name') or '–¥—Ä—É–≥'} üåô {pr}\n–û—Ç–ø—Ä–∞–≤—å /report –∏ –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏, —á—Ç–æ —Å–¥–µ–ª–∞–ª."
    await send_message(app, chat_id, msg)

async def random_midday_ping(app, chat_id):
    user = get_user(chat_id)
    pr = random.choice(MIDDAY_PROMPTS)
    msg = f"{user.get('name') or '–≠–π'}! {pr}"
    await send_message(app, chat_id, msg)

def schedule_for_chat(app, chat_id):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞."""
    if not hasattr(app, "scheduler"):
        app.scheduler = AsyncIOScheduler(timezone=TZ)
        app.scheduler.start()

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è (–µ—Å–ª–∏ –±—ã–ª–∏)
    for jid in [f"morning_{chat_id}", f"evening_{chat_id}", f"randpick_{chat_id}", f"mid_{chat_id}"]:
        try:
            app.scheduler.remove_job(jid)
        except Exception:
            pass

    # 09:00 –∏ 21:00 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
    app.scheduler.add_job(morning_ping, CronTrigger(hour=9, minute=0, timezone=TZ),
                          args=[app, chat_id], id=f"morning_{chat_id}", replace_existing=True)
    app.scheduler.add_job(evening_ping, CronTrigger(hour=21, minute=0, timezone=TZ),
                          args=[app, chat_id], id=f"evening_{chat_id}", replace_existing=True)

    # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 11:55 –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ –ø–∏–Ω–≥–∞ 12:00‚Äì19:59
    async def daily_random_job():
        hour = random.randint(12, 19)
        minute = random.randint(0, 59)
        jid = f"mid_{chat_id}"
        try:
            app.scheduler.remove_job(jid)
        except Exception:
            pass
        app.scheduler.add_job(random_midday_ping, CronTrigger(hour=hour, minute=minute, timezone=TZ),
                              args=[app, chat_id], id=jid, replace_existing=True)

    app.scheduler.add_job(daily_random_job, CronTrigger(hour=11, minute=55, timezone=TZ),
                          id=f"randpick_{chat_id}", replace_existing=True)

# ==== Bootstrap ====
def require_token():
    tok = os.environ.get("BOT_TOKEN")
    if not tok:
        raise RuntimeError("Set BOT_TOKEN in environment.")
    return tok

async def main():
    token = require_token()
    application = ApplicationBuilder().token(token).build()

    # Commands
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_cmd))
    application.add_handler(CommandHandler("goal", goal))
    application.add_handler(CommandHandler("goals", goals))
    application.add_handler(CommandHandler("habit", habit))
    application.add_handler(CommandHandler("habits", habits))
    application.add_handler(CommandHandler("plan", plan))
    application.add_handler(CommandHandler("report", report))

    # Fallback for any text
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, fallback))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    application.scheduler = AsyncIOScheduler(timezone=TZ)
    application.scheduler.start()
    for key in list(db.keys()):
        schedule_for_chat(application, int(key))

    print(f"{BOT_NAME} is running with TZ Asia/Tashkent.")
    await application.run_polling()

if __name__ == "__main__":
    # Apply nest_asyncio to allow running asyncio in environments with existing event loops
    nest_asyncio.apply()
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):

        pass
